// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grin {
PROTOBUF_CONSTEXPR TopologyFeature::TopologyFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_list_retrievals_)*/{}
  , /*decltype(_impl_._vertex_list_retrievals_cached_byte_size_)*/{0}
  , /*decltype(_impl_.edge_list_retrievals_)*/{}
  , /*decltype(_impl_._edge_list_retrievals_cached_byte_size_)*/{0}
  , /*decltype(_impl_.adjacent_list_retrievals_)*/{}
  , /*decltype(_impl_._adjacent_list_retrievals_cached_byte_size_)*/{0}
  , /*decltype(_impl_.grin_assume_has_directed_graph_)*/false
  , /*decltype(_impl_.grin_assume_has_undirected_graph_)*/false
  , /*decltype(_impl_.grin_assume_has_multi_edge_graph_)*/false
  , /*decltype(_impl_.grin_with_vertex_original_id_)*/false
  , /*decltype(_impl_.grin_with_vertex_data_)*/false
  , /*decltype(_impl_.grin_with_edge_data_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopologyFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopologyFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopologyFeatureDefaultTypeInternal() {}
  union {
    TopologyFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopologyFeatureDefaultTypeInternal _TopologyFeature_default_instance_;
PROTOBUF_CONSTEXPR MirrorPartitionListFeature::MirrorPartitionListFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_trait_master_vertex_mirror_partition_list_)*/false
  , /*decltype(_impl_.grin_trait_mirror_vertex_mirror_partition_list_)*/false
  , /*decltype(_impl_.grin_trait_master_edge_mirror_partition_list_)*/false
  , /*decltype(_impl_.grin_trait_mirror_edge_mirror_partition_list_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MirrorPartitionListFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MirrorPartitionListFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MirrorPartitionListFeatureDefaultTypeInternal() {}
  union {
    MirrorPartitionListFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MirrorPartitionListFeatureDefaultTypeInternal _MirrorPartitionListFeature_default_instance_;
PROTOBUF_CONSTEXPR PartitionFeature::PartitionFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mirror_partition_list_feature_)*/nullptr
  , /*decltype(_impl_.graph_partition_strategy_)*/0
  , /*decltype(_impl_.grin_trait_natural_id_for_partition_)*/false
  , /*decltype(_impl_.grin_enable_vertex_ref_)*/false
  , /*decltype(_impl_.grin_enable_edge_ref_)*/false
  , /*decltype(_impl_.grin_trait_select_master_for_vertex_list_)*/false
  , /*decltype(_impl_.vertex_data_)*/0
  , /*decltype(_impl_.edge_data_)*/0
  , /*decltype(_impl_.grin_trait_select_partition_for_vertex_list_)*/false
  , /*decltype(_impl_.grin_trait_select_master_for_edge_list_)*/false
  , /*decltype(_impl_.grin_trait_select_partition_for_edge_list_)*/false
  , /*decltype(_impl_.grin_trait_select_master_neighbor_for_adjacent_list_)*/false
  , /*decltype(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionFeatureDefaultTypeInternal() {}
  union {
    PartitionFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionFeatureDefaultTypeInternal _PartitionFeature_default_instance_;
PROTOBUF_CONSTEXPR VertexPropertyFeature::VertexPropertyFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_with_vertex_property_)*/false
  , /*decltype(_impl_.grin_with_vertex_property_name_)*/false
  , /*decltype(_impl_.grin_with_vertex_type_name_)*/false
  , /*decltype(_impl_.grin_enable_vertex_property_table_)*/false
  , /*decltype(_impl_.grin_enable_vertex_primary_keys_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_vertex_type_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_vertex_property_)*/false
  , /*decltype(_impl_.grin_assume_by_type_vertex_original_id_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexPropertyFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexPropertyFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexPropertyFeatureDefaultTypeInternal() {}
  union {
    VertexPropertyFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexPropertyFeatureDefaultTypeInternal _VertexPropertyFeature_default_instance_;
PROTOBUF_CONSTEXPR EdgePropertyFeature::EdgePropertyFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_with_edge_property_)*/false
  , /*decltype(_impl_.grin_with_edge_property_name_)*/false
  , /*decltype(_impl_.grin_with_edge_type_name_)*/false
  , /*decltype(_impl_.grin_enable_edge_property_table_)*/false
  , /*decltype(_impl_.grin_enable_edge_primary_keys_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_edge_type_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_edge_property_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgePropertyFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgePropertyFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgePropertyFeatureDefaultTypeInternal() {}
  union {
    EdgePropertyFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgePropertyFeatureDefaultTypeInternal _EdgePropertyFeature_default_instance_;
PROTOBUF_CONSTEXPR PropertyFeature::PropertyFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_property_feature_)*/nullptr
  , /*decltype(_impl_.edge_property_feature_)*/nullptr
  , /*decltype(_impl_.vertex_property_)*/0
  , /*decltype(_impl_.edge_property_)*/0
  , /*decltype(_impl_.grin_enable_row_)*/false
  , /*decltype(_impl_.grin_assume_column_store_for_vertex_property_)*/false
  , /*decltype(_impl_.grin_assume_column_store_for_edge_property_)*/false
  , /*decltype(_impl_.grin_trait_select_type_for_vertex_list_)*/false
  , /*decltype(_impl_.grin_trait_select_type_for_edge_list_)*/false
  , /*decltype(_impl_.grin_trait_select_neighbor_type_for_adjacent_list_)*/false
  , /*decltype(_impl_.grin_trait_select_edge_type_for_adjacent_list_)*/false
  , /*decltype(_impl_.grin_trait_specific_vev_relation_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertyFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyFeatureDefaultTypeInternal() {}
  union {
    PropertyFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyFeatureDefaultTypeInternal _PropertyFeature_default_instance_;
PROTOBUF_CONSTEXPR IndexFeature::IndexFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_with_vertex_label_)*/false
  , /*decltype(_impl_.grin_with_edge_label_)*/false
  , /*decltype(_impl_.grin_assume_all_vertex_list_sorted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexFeatureDefaultTypeInternal() {}
  union {
    IndexFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexFeatureDefaultTypeInternal _IndexFeature_default_instance_;
PROTOBUF_CONSTEXPR PredicateFeature::PredicateFeature(
    ::_pbi::ConstantInitialized) {}
struct PredicateFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredicateFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredicateFeatureDefaultTypeInternal() {}
  union {
    PredicateFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredicateFeatureDefaultTypeInternal _PredicateFeature_default_instance_;
PROTOBUF_CONSTEXPR StorageFeature::StorageFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.specific_feature_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StorageFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageFeatureDefaultTypeInternal() {}
  union {
    StorageFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageFeatureDefaultTypeInternal _StorageFeature_default_instance_;
PROTOBUF_CONSTEXPR Statistics::Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_count_)*/0
  , /*decltype(_impl_.edge_count_)*/0
  , /*decltype(_impl_.partition_count_)*/0
  , /*decltype(_impl_.vertex_type_count_)*/0
  , /*decltype(_impl_.edge_type_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticsDefaultTypeInternal() {}
  union {
    Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticsDefaultTypeInternal _Statistics_default_instance_;
PROTOBUF_CONSTEXPR Graph::Graph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grin_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statistics_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDefaultTypeInternal _Graph_default_instance_;
}  // namespace grin
static ::_pb::Metadata file_level_metadata_graph_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_graph_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.grin_assume_has_directed_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.grin_assume_has_undirected_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.grin_assume_has_multi_edge_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.grin_with_vertex_original_id_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.grin_with_vertex_data_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.grin_with_edge_data_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.vertex_list_retrievals_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.edge_list_retrievals_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyFeature, _impl_.adjacent_list_retrievals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, _impl_.grin_trait_master_vertex_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, _impl_.grin_trait_mirror_vertex_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, _impl_.grin_trait_master_edge_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListFeature, _impl_.grin_trait_mirror_edge_mirror_partition_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.graph_partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_natural_id_for_partition_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_enable_vertex_ref_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_enable_edge_ref_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.vertex_data_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.edge_data_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.mirror_partition_list_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_select_master_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_select_partition_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_select_master_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_select_partition_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_select_master_neighbor_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionFeature, _impl_.grin_trait_select_neighbor_partition_for_adjacent_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_with_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_with_vertex_property_name_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_with_vertex_type_name_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_enable_vertex_property_table_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_enable_vertex_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_trait_natural_id_for_vertex_type_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_trait_natural_id_for_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyFeature, _impl_.grin_assume_by_type_vertex_original_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_with_edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_with_edge_property_name_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_with_edge_type_name_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_enable_edge_property_table_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_enable_edge_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_trait_natural_id_for_edge_type_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyFeature, _impl_.grin_trait_natural_id_for_edge_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_enable_row_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.vertex_property_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.edge_property_feature_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_assume_column_store_for_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_assume_column_store_for_edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_trait_select_type_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_trait_select_type_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_trait_select_neighbor_type_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_trait_select_edge_type_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyFeature, _impl_.grin_trait_specific_vev_relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, _impl_.grin_with_vertex_label_),
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, _impl_.grin_with_edge_label_),
  PROTOBUF_FIELD_OFFSET(::grin::IndexFeature, _impl_.grin_assume_all_vertex_list_sorted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PredicateFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::StorageFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grin::StorageFeature, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grin::StorageFeature, _impl_.specific_feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.vertex_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.edge_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.partition_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.vertex_type_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.edge_type_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.grin_version_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.statistics_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grin::TopologyFeature)},
  { 15, -1, -1, sizeof(::grin::MirrorPartitionListFeature)},
  { 25, -1, -1, sizeof(::grin::PartitionFeature)},
  { 44, -1, -1, sizeof(::grin::VertexPropertyFeature)},
  { 58, -1, -1, sizeof(::grin::EdgePropertyFeature)},
  { 71, -1, -1, sizeof(::grin::PropertyFeature)},
  { 89, -1, -1, sizeof(::grin::IndexFeature)},
  { 98, -1, -1, sizeof(::grin::PredicateFeature)},
  { 104, -1, -1, sizeof(::grin::StorageFeature)},
  { 116, -1, -1, sizeof(::grin::Statistics)},
  { 127, -1, -1, sizeof(::grin::Graph)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grin::_TopologyFeature_default_instance_._instance,
  &::grin::_MirrorPartitionListFeature_default_instance_._instance,
  &::grin::_PartitionFeature_default_instance_._instance,
  &::grin::_VertexPropertyFeature_default_instance_._instance,
  &::grin::_EdgePropertyFeature_default_instance_._instance,
  &::grin::_PropertyFeature_default_instance_._instance,
  &::grin::_IndexFeature_default_instance_._instance,
  &::grin::_PredicateFeature_default_instance_._instance,
  &::grin::_StorageFeature_default_instance_._instance,
  &::grin::_Statistics_default_instance_._instance,
  &::grin::_Graph_default_instance_._instance,
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\004grin\"\216\003\n\017TopologyFeature\022"
  "&\n\036grin_assume_has_directed_graph\030\001 \001(\010\022"
  "(\n grin_assume_has_undirected_graph\030\002 \001("
  "\010\022(\n grin_assume_has_multi_edge_graph\030\003 "
  "\001(\010\022$\n\034grin_with_vertex_original_id\030\004 \001("
  "\010\022\035\n\025grin_with_vertex_data\030\005 \001(\010\022\033\n\023grin"
  "_with_edge_data\030\006 \001(\010\0223\n\026vertex_list_ret"
  "rievals\030\007 \003(\0162\023.grin.ListRetrieval\0221\n\024ed"
  "ge_list_retrievals\030\010 \003(\0162\023.grin.ListRetr"
  "ieval\0225\n\030adjacent_list_retrievals\030\t \003(\0162"
  "\023.grin.ListRetrieval\"\370\001\n\032MirrorPartition"
  "ListFeature\0226\n.grin_trait_master_vertex_"
  "mirror_partition_list\030\001 \001(\010\0226\n.grin_trai"
  "t_mirror_vertex_mirror_partition_list\030\002 "
  "\001(\010\0224\n,grin_trait_master_edge_mirror_par"
  "tition_list\030\003 \001(\010\0224\n,grin_trait_mirror_e"
  "dge_mirror_partition_list\030\004 \001(\010\"\277\005\n\020Part"
  "itionFeature\022>\n\030graph_partition_strategy"
  "\030\001 \001(\0162\034.grin.GraphPartitionStrategy\022+\n#"
  "grin_trait_natural_id_for_partition\030\002 \001("
  "\010\022\036\n\026grin_enable_vertex_ref\030\003 \001(\010\022\034\n\024gri"
  "n_enable_edge_ref\030\004 \001(\010\0228\n\013vertex_data\030\005"
  " \001(\0162#.grin.PropertyDataPartitionStrateg"
  "y\0226\n\tedge_data\030\006 \001(\0162#.grin.PropertyData"
  "PartitionStrategy\022G\n\035mirror_partition_li"
  "st_feature\030\007 \001(\0132 .grin.MirrorPartitionL"
  "istFeature\0220\n(grin_trait_select_master_f"
  "or_vertex_list\030\010 \001(\010\0223\n+grin_trait_selec"
  "t_partition_for_vertex_list\030\t \001(\010\022.\n&gri"
  "n_trait_select_master_for_edge_list\030\n \001("
  "\010\0221\n)grin_trait_select_partition_for_edg"
  "e_list\030\013 \001(\010\022;\n3grin_trait_select_master"
  "_neighbor_for_adjacent_list\030\014 \001(\010\022>\n6gri"
  "n_trait_select_neighbor_partition_for_ad"
  "jacent_list\030\r \001(\010\"\354\002\n\025VertexPropertyFeat"
  "ure\022!\n\031grin_with_vertex_property\030\001 \001(\010\022&"
  "\n\036grin_with_vertex_property_name\030\002 \001(\010\022\""
  "\n\032grin_with_vertex_type_name\030\003 \001(\010\022)\n!gr"
  "in_enable_vertex_property_table\030\004 \001(\010\022\'\n"
  "\037grin_enable_vertex_primary_keys\030\005 \001(\010\022-"
  "\n%grin_trait_natural_id_for_vertex_type\030"
  "\006 \001(\010\0221\n)grin_trait_natural_id_for_verte"
  "x_property\030\007 \001(\010\022.\n&grin_assume_by_type_"
  "vertex_original_id\030\010 \001(\010\"\254\002\n\023EdgePropert"
  "yFeature\022\037\n\027grin_with_edge_property\030\001 \001("
  "\010\022$\n\034grin_with_edge_property_name\030\002 \001(\010\022"
  " \n\030grin_with_edge_type_name\030\003 \001(\010\022\'\n\037gri"
  "n_enable_edge_property_table\030\004 \001(\010\022%\n\035gr"
  "in_enable_edge_primary_keys\030\005 \001(\010\022+\n#gri"
  "n_trait_natural_id_for_edge_type\030\006 \001(\010\022/"
  "\n\'grin_trait_natural_id_for_edge_propert"
  "y\030\007 \001(\010\"\200\005\n\017PropertyFeature\022\027\n\017grin_enab"
  "le_row\030\001 \001(\010\022<\n\027vertex_property_feature\030"
  "\002 \001(\0132\033.grin.VertexPropertyFeature\0228\n\025ed"
  "ge_property_feature\030\003 \001(\0132\031.grin.EdgePro"
  "pertyFeature\022<\n\017vertex_property\030\004 \001(\0162#."
  "grin.PropertyDataPartitionStrategy\022:\n\red"
  "ge_property\030\005 \001(\0162#.grin.PropertyDataPar"
  "titionStrategy\0224\n,grin_assume_column_sto"
  "re_for_vertex_property\030\006 \001(\010\0222\n*grin_ass"
  "ume_column_store_for_edge_property\030\007 \001(\010"
  "\022.\n&grin_trait_select_type_for_vertex_li"
  "st\030\010 \001(\010\022,\n$grin_trait_select_type_for_e"
  "dge_list\030\t \001(\010\0229\n1grin_trait_select_neig"
  "hbor_type_for_adjacent_list\030\n \001(\010\0225\n-gri"
  "n_trait_select_edge_type_for_adjacent_li"
  "st\030\013 \001(\010\022(\n grin_trait_specific_vev_rela"
  "tion\030\014 \001(\010\"x\n\014IndexFeature\022\036\n\026grin_with_"
  "vertex_label\030\001 \001(\010\022\034\n\024grin_with_edge_lab"
  "el\030\002 \001(\010\022*\n\"grin_assume_all_vertex_list_"
  "sorted\030\003 \001(\010\"\022\n\020PredicateFeature\"\241\002\n\016Sto"
  "rageFeature\0221\n\020topology_feature\030\001 \001(\0132\025."
  "grin.TopologyFeatureH\000\0223\n\021partition_feat"
  "ure\030\002 \001(\0132\026.grin.PartitionFeatureH\000\0221\n\020p"
  "roperty_feature\030\003 \001(\0132\025.grin.PropertyFea"
  "tureH\000\022+\n\rindex_feature\030\004 \001(\0132\022.grin.Ind"
  "exFeatureH\000\0223\n\021predicate_feature\030\005 \001(\0132\026"
  ".grin.PredicateFeatureH\000B\022\n\020specific_fea"
  "ture\"\203\001\n\nStatistics\022\024\n\014vertex_count\030\001 \001("
  "\005\022\022\n\nedge_count\030\002 \001(\005\022\027\n\017partition_count"
  "\030\003 \001(\005\022\031\n\021vertex_type_count\030\004 \001(\005\022\027\n\017edg"
  "e_type_count\030\005 \001(\005\"x\n\005Graph\022\013\n\003uri\030\001 \001(\t"
  "\022\024\n\014grin_version\030\002 \001(\t\022&\n\010features\030\003 \003(\013"
  "2\024.grin.StorageFeature\022$\n\nstatistics\030\004 \001"
  "(\0132\020.grin.Statistics*>\n\rListRetrieval\022\t\n"
  "\005LR_NA\020\000\022\021\n\rLR_ARRAY_LIKE\020\001\022\017\n\013LR_ITERAT"
  "OR\020\002*u\n\026GraphPartitionStrategy\022\n\n\006GPS_NA"
  "\020\000\022\025\n\021GPS_ALL_REPLICATE\020\001\022\020\n\014GPS_EDGE_CU"
  "T\020\002\022\022\n\016GPS_VERTEX_CUT\020\003\022\022\n\016GPS_HYBRID_CU"
  "T\020\004*\202\001\n\035PropertyDataPartitionStrategy\022\013\n"
  "\007PDPS_NA\020\000\022\024\n\020PDPS_MASTER_ONLY\020\001\022 \n\034PDPS"
  "_REPLICATE_MASTER_MIRROR\020\002\022\034\n\030PDPS_SPLIT"
  "_MASTER_MIRROR\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_graph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_graph_2eproto = {
    false, false, 3704, descriptor_table_protodef_graph_2eproto,
    "graph.proto",
    &descriptor_table_graph_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
    file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto,
    file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace grin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListRetrieval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[0];
}
bool ListRetrieval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[1];
}
bool GraphPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyDataPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[2];
}
bool PropertyDataPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TopologyFeature::_Internal {
 public:
};

TopologyFeature::TopologyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.TopologyFeature)
}
TopologyFeature::TopologyFeature(const TopologyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopologyFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_list_retrievals_){from._impl_.vertex_list_retrievals_}
    , /*decltype(_impl_._vertex_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.edge_list_retrievals_){from._impl_.edge_list_retrievals_}
    , /*decltype(_impl_._edge_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.adjacent_list_retrievals_){from._impl_.adjacent_list_retrievals_}
    , /*decltype(_impl_._adjacent_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.grin_assume_has_directed_graph_){}
    , decltype(_impl_.grin_assume_has_undirected_graph_){}
    , decltype(_impl_.grin_assume_has_multi_edge_graph_){}
    , decltype(_impl_.grin_with_vertex_original_id_){}
    , decltype(_impl_.grin_with_vertex_data_){}
    , decltype(_impl_.grin_with_edge_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_assume_has_directed_graph_, &from._impl_.grin_assume_has_directed_graph_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_with_edge_data_) -
    reinterpret_cast<char*>(&_impl_.grin_assume_has_directed_graph_)) + sizeof(_impl_.grin_with_edge_data_));
  // @@protoc_insertion_point(copy_constructor:grin.TopologyFeature)
}

inline void TopologyFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_list_retrievals_){arena}
    , /*decltype(_impl_._vertex_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.edge_list_retrievals_){arena}
    , /*decltype(_impl_._edge_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.adjacent_list_retrievals_){arena}
    , /*decltype(_impl_._adjacent_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.grin_assume_has_directed_graph_){false}
    , decltype(_impl_.grin_assume_has_undirected_graph_){false}
    , decltype(_impl_.grin_assume_has_multi_edge_graph_){false}
    , decltype(_impl_.grin_with_vertex_original_id_){false}
    , decltype(_impl_.grin_with_vertex_data_){false}
    , decltype(_impl_.grin_with_edge_data_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TopologyFeature::~TopologyFeature() {
  // @@protoc_insertion_point(destructor:grin.TopologyFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopologyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertex_list_retrievals_.~RepeatedField();
  _impl_.edge_list_retrievals_.~RepeatedField();
  _impl_.adjacent_list_retrievals_.~RepeatedField();
}

void TopologyFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopologyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.TopologyFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertex_list_retrievals_.Clear();
  _impl_.edge_list_retrievals_.Clear();
  _impl_.adjacent_list_retrievals_.Clear();
  ::memset(&_impl_.grin_assume_has_directed_graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_with_edge_data_) -
      reinterpret_cast<char*>(&_impl_.grin_assume_has_directed_graph_)) + sizeof(_impl_.grin_with_edge_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopologyFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_assume_has_directed_graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_assume_has_directed_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_has_undirected_graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_assume_has_undirected_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_has_multi_edge_graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_assume_has_multi_edge_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_original_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_with_vertex_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grin_with_vertex_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_with_edge_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_vertex_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_vertex_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval edge_list_retrievals = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_edge_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_edge_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_adjacent_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_adjacent_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopologyFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.TopologyFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_assume_has_directed_graph = 1;
  if (this->_internal_grin_assume_has_directed_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_assume_has_directed_graph(), target);
  }

  // bool grin_assume_has_undirected_graph = 2;
  if (this->_internal_grin_assume_has_undirected_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_assume_has_undirected_graph(), target);
  }

  // bool grin_assume_has_multi_edge_graph = 3;
  if (this->_internal_grin_assume_has_multi_edge_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_assume_has_multi_edge_graph(), target);
  }

  // bool grin_with_vertex_original_id = 4;
  if (this->_internal_grin_with_vertex_original_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_with_vertex_original_id(), target);
  }

  // bool grin_with_vertex_data = 5;
  if (this->_internal_grin_with_vertex_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_with_vertex_data(), target);
  }

  // bool grin_with_edge_data = 6;
  if (this->_internal_grin_with_edge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_with_edge_data(), target);
  }

  // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
  {
    int byte_size = _impl_._vertex_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, _impl_.vertex_list_retrievals_, byte_size, target);
    }
  }

  // repeated .grin.ListRetrieval edge_list_retrievals = 8;
  {
    int byte_size = _impl_._edge_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, _impl_.edge_list_retrievals_, byte_size, target);
    }
  }

  // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
  {
    int byte_size = _impl_._adjacent_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, _impl_.adjacent_list_retrievals_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.TopologyFeature)
  return target;
}

size_t TopologyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.TopologyFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_vertex_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_vertex_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._vertex_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .grin.ListRetrieval edge_list_retrievals = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_edge_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_edge_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._edge_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_adjacent_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_adjacent_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._adjacent_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool grin_assume_has_directed_graph = 1;
  if (this->_internal_grin_assume_has_directed_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_has_undirected_graph = 2;
  if (this->_internal_grin_assume_has_undirected_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_has_multi_edge_graph = 3;
  if (this->_internal_grin_assume_has_multi_edge_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_original_id = 4;
  if (this->_internal_grin_with_vertex_original_id() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_data = 5;
  if (this->_internal_grin_with_vertex_data() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_data = 6;
  if (this->_internal_grin_with_edge_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopologyFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopologyFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopologyFeature::GetClassData() const { return &_class_data_; }


void TopologyFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopologyFeature*>(&to_msg);
  auto& from = static_cast<const TopologyFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.TopologyFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertex_list_retrievals_.MergeFrom(from._impl_.vertex_list_retrievals_);
  _this->_impl_.edge_list_retrievals_.MergeFrom(from._impl_.edge_list_retrievals_);
  _this->_impl_.adjacent_list_retrievals_.MergeFrom(from._impl_.adjacent_list_retrievals_);
  if (from._internal_grin_assume_has_directed_graph() != 0) {
    _this->_internal_set_grin_assume_has_directed_graph(from._internal_grin_assume_has_directed_graph());
  }
  if (from._internal_grin_assume_has_undirected_graph() != 0) {
    _this->_internal_set_grin_assume_has_undirected_graph(from._internal_grin_assume_has_undirected_graph());
  }
  if (from._internal_grin_assume_has_multi_edge_graph() != 0) {
    _this->_internal_set_grin_assume_has_multi_edge_graph(from._internal_grin_assume_has_multi_edge_graph());
  }
  if (from._internal_grin_with_vertex_original_id() != 0) {
    _this->_internal_set_grin_with_vertex_original_id(from._internal_grin_with_vertex_original_id());
  }
  if (from._internal_grin_with_vertex_data() != 0) {
    _this->_internal_set_grin_with_vertex_data(from._internal_grin_with_vertex_data());
  }
  if (from._internal_grin_with_edge_data() != 0) {
    _this->_internal_set_grin_with_edge_data(from._internal_grin_with_edge_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopologyFeature::CopyFrom(const TopologyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.TopologyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyFeature::IsInitialized() const {
  return true;
}

void TopologyFeature::InternalSwap(TopologyFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertex_list_retrievals_.InternalSwap(&other->_impl_.vertex_list_retrievals_);
  _impl_.edge_list_retrievals_.InternalSwap(&other->_impl_.edge_list_retrievals_);
  _impl_.adjacent_list_retrievals_.InternalSwap(&other->_impl_.adjacent_list_retrievals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopologyFeature, _impl_.grin_with_edge_data_)
      + sizeof(TopologyFeature::_impl_.grin_with_edge_data_)
      - PROTOBUF_FIELD_OFFSET(TopologyFeature, _impl_.grin_assume_has_directed_graph_)>(
          reinterpret_cast<char*>(&_impl_.grin_assume_has_directed_graph_),
          reinterpret_cast<char*>(&other->_impl_.grin_assume_has_directed_graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopologyFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class MirrorPartitionListFeature::_Internal {
 public:
};

MirrorPartitionListFeature::MirrorPartitionListFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.MirrorPartitionListFeature)
}
MirrorPartitionListFeature::MirrorPartitionListFeature(const MirrorPartitionListFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MirrorPartitionListFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_trait_master_vertex_mirror_partition_list_){}
    , decltype(_impl_.grin_trait_mirror_vertex_mirror_partition_list_){}
    , decltype(_impl_.grin_trait_master_edge_mirror_partition_list_){}
    , decltype(_impl_.grin_trait_mirror_edge_mirror_partition_list_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_trait_master_vertex_mirror_partition_list_, &from._impl_.grin_trait_master_vertex_mirror_partition_list_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_mirror_edge_mirror_partition_list_) -
    reinterpret_cast<char*>(&_impl_.grin_trait_master_vertex_mirror_partition_list_)) + sizeof(_impl_.grin_trait_mirror_edge_mirror_partition_list_));
  // @@protoc_insertion_point(copy_constructor:grin.MirrorPartitionListFeature)
}

inline void MirrorPartitionListFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_trait_master_vertex_mirror_partition_list_){false}
    , decltype(_impl_.grin_trait_mirror_vertex_mirror_partition_list_){false}
    , decltype(_impl_.grin_trait_master_edge_mirror_partition_list_){false}
    , decltype(_impl_.grin_trait_mirror_edge_mirror_partition_list_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MirrorPartitionListFeature::~MirrorPartitionListFeature() {
  // @@protoc_insertion_point(destructor:grin.MirrorPartitionListFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MirrorPartitionListFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MirrorPartitionListFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MirrorPartitionListFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.MirrorPartitionListFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_trait_master_vertex_mirror_partition_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_mirror_edge_mirror_partition_list_) -
      reinterpret_cast<char*>(&_impl_.grin_trait_master_vertex_mirror_partition_list_)) + sizeof(_impl_.grin_trait_mirror_edge_mirror_partition_list_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MirrorPartitionListFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_trait_master_vertex_mirror_partition_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_trait_master_vertex_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_trait_mirror_vertex_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_master_edge_mirror_partition_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_trait_master_edge_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_mirror_edge_mirror_partition_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_trait_mirror_edge_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MirrorPartitionListFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.MirrorPartitionListFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_trait_master_vertex_mirror_partition_list = 1;
  if (this->_internal_grin_trait_master_vertex_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_trait_master_vertex_mirror_partition_list(), target);
  }

  // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
  if (this->_internal_grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_trait_mirror_vertex_mirror_partition_list(), target);
  }

  // bool grin_trait_master_edge_mirror_partition_list = 3;
  if (this->_internal_grin_trait_master_edge_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_trait_master_edge_mirror_partition_list(), target);
  }

  // bool grin_trait_mirror_edge_mirror_partition_list = 4;
  if (this->_internal_grin_trait_mirror_edge_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_trait_mirror_edge_mirror_partition_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.MirrorPartitionListFeature)
  return target;
}

size_t MirrorPartitionListFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.MirrorPartitionListFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_trait_master_vertex_mirror_partition_list = 1;
  if (this->_internal_grin_trait_master_vertex_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
  if (this->_internal_grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_master_edge_mirror_partition_list = 3;
  if (this->_internal_grin_trait_master_edge_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_mirror_edge_mirror_partition_list = 4;
  if (this->_internal_grin_trait_mirror_edge_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MirrorPartitionListFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MirrorPartitionListFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MirrorPartitionListFeature::GetClassData() const { return &_class_data_; }


void MirrorPartitionListFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MirrorPartitionListFeature*>(&to_msg);
  auto& from = static_cast<const MirrorPartitionListFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.MirrorPartitionListFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_trait_master_vertex_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_master_vertex_mirror_partition_list(from._internal_grin_trait_master_vertex_mirror_partition_list());
  }
  if (from._internal_grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_mirror_vertex_mirror_partition_list(from._internal_grin_trait_mirror_vertex_mirror_partition_list());
  }
  if (from._internal_grin_trait_master_edge_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_master_edge_mirror_partition_list(from._internal_grin_trait_master_edge_mirror_partition_list());
  }
  if (from._internal_grin_trait_mirror_edge_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_mirror_edge_mirror_partition_list(from._internal_grin_trait_mirror_edge_mirror_partition_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MirrorPartitionListFeature::CopyFrom(const MirrorPartitionListFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.MirrorPartitionListFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirrorPartitionListFeature::IsInitialized() const {
  return true;
}

void MirrorPartitionListFeature::InternalSwap(MirrorPartitionListFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MirrorPartitionListFeature, _impl_.grin_trait_mirror_edge_mirror_partition_list_)
      + sizeof(MirrorPartitionListFeature::_impl_.grin_trait_mirror_edge_mirror_partition_list_)
      - PROTOBUF_FIELD_OFFSET(MirrorPartitionListFeature, _impl_.grin_trait_master_vertex_mirror_partition_list_)>(
          reinterpret_cast<char*>(&_impl_.grin_trait_master_vertex_mirror_partition_list_),
          reinterpret_cast<char*>(&other->_impl_.grin_trait_master_vertex_mirror_partition_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MirrorPartitionListFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class PartitionFeature::_Internal {
 public:
  static const ::grin::MirrorPartitionListFeature& mirror_partition_list_feature(const PartitionFeature* msg);
};

const ::grin::MirrorPartitionListFeature&
PartitionFeature::_Internal::mirror_partition_list_feature(const PartitionFeature* msg) {
  return *msg->_impl_.mirror_partition_list_feature_;
}
PartitionFeature::PartitionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.PartitionFeature)
}
PartitionFeature::PartitionFeature(const PartitionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mirror_partition_list_feature_){nullptr}
    , decltype(_impl_.graph_partition_strategy_){}
    , decltype(_impl_.grin_trait_natural_id_for_partition_){}
    , decltype(_impl_.grin_enable_vertex_ref_){}
    , decltype(_impl_.grin_enable_edge_ref_){}
    , decltype(_impl_.grin_trait_select_master_for_vertex_list_){}
    , decltype(_impl_.vertex_data_){}
    , decltype(_impl_.edge_data_){}
    , decltype(_impl_.grin_trait_select_partition_for_vertex_list_){}
    , decltype(_impl_.grin_trait_select_master_for_edge_list_){}
    , decltype(_impl_.grin_trait_select_partition_for_edge_list_){}
    , decltype(_impl_.grin_trait_select_master_neighbor_for_adjacent_list_){}
    , decltype(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mirror_partition_list_feature()) {
    _this->_impl_.mirror_partition_list_feature_ = new ::grin::MirrorPartitionListFeature(*from._impl_.mirror_partition_list_feature_);
  }
  ::memcpy(&_impl_.graph_partition_strategy_, &from._impl_.graph_partition_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_) -
    reinterpret_cast<char*>(&_impl_.graph_partition_strategy_)) + sizeof(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_));
  // @@protoc_insertion_point(copy_constructor:grin.PartitionFeature)
}

inline void PartitionFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mirror_partition_list_feature_){nullptr}
    , decltype(_impl_.graph_partition_strategy_){0}
    , decltype(_impl_.grin_trait_natural_id_for_partition_){false}
    , decltype(_impl_.grin_enable_vertex_ref_){false}
    , decltype(_impl_.grin_enable_edge_ref_){false}
    , decltype(_impl_.grin_trait_select_master_for_vertex_list_){false}
    , decltype(_impl_.vertex_data_){0}
    , decltype(_impl_.edge_data_){0}
    , decltype(_impl_.grin_trait_select_partition_for_vertex_list_){false}
    , decltype(_impl_.grin_trait_select_master_for_edge_list_){false}
    , decltype(_impl_.grin_trait_select_partition_for_edge_list_){false}
    , decltype(_impl_.grin_trait_select_master_neighbor_for_adjacent_list_){false}
    , decltype(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionFeature::~PartitionFeature() {
  // @@protoc_insertion_point(destructor:grin.PartitionFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mirror_partition_list_feature_;
}

void PartitionFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PartitionFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mirror_partition_list_feature_ != nullptr) {
    delete _impl_.mirror_partition_list_feature_;
  }
  _impl_.mirror_partition_list_feature_ = nullptr;
  ::memset(&_impl_.graph_partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_) -
      reinterpret_cast<char*>(&_impl_.graph_partition_strategy_)) + sizeof(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_graph_partition_strategy(static_cast<::grin::GraphPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_partition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_trait_natural_id_for_partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_vertex_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_enable_vertex_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_edge_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_enable_edge_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy vertex_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_data(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy edge_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_data(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .grin.MirrorPartitionListFeature mirror_partition_list_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mirror_partition_list_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_master_for_vertex_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.grin_trait_select_master_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_partition_for_vertex_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.grin_trait_select_partition_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_master_for_edge_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.grin_trait_select_master_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_partition_for_edge_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.grin_trait_select_partition_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.grin_trait_select_master_neighbor_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.grin_trait_select_neighbor_partition_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PartitionFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
  if (this->_internal_graph_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_graph_partition_strategy(), target);
  }

  // bool grin_trait_natural_id_for_partition = 2;
  if (this->_internal_grin_trait_natural_id_for_partition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_trait_natural_id_for_partition(), target);
  }

  // bool grin_enable_vertex_ref = 3;
  if (this->_internal_grin_enable_vertex_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_enable_vertex_ref(), target);
  }

  // bool grin_enable_edge_ref = 4;
  if (this->_internal_grin_enable_edge_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_edge_ref(), target);
  }

  // .grin.PropertyDataPartitionStrategy vertex_data = 5;
  if (this->_internal_vertex_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vertex_data(), target);
  }

  // .grin.PropertyDataPartitionStrategy edge_data = 6;
  if (this->_internal_edge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_edge_data(), target);
  }

  // .grin.MirrorPartitionListFeature mirror_partition_list_feature = 7;
  if (this->_internal_has_mirror_partition_list_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mirror_partition_list_feature(this),
        _Internal::mirror_partition_list_feature(this).GetCachedSize(), target, stream);
  }

  // bool grin_trait_select_master_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_master_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_trait_select_master_for_vertex_list(), target);
  }

  // bool grin_trait_select_partition_for_vertex_list = 9;
  if (this->_internal_grin_trait_select_partition_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_grin_trait_select_partition_for_vertex_list(), target);
  }

  // bool grin_trait_select_master_for_edge_list = 10;
  if (this->_internal_grin_trait_select_master_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_grin_trait_select_master_for_edge_list(), target);
  }

  // bool grin_trait_select_partition_for_edge_list = 11;
  if (this->_internal_grin_trait_select_partition_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_grin_trait_select_partition_for_edge_list(), target);
  }

  // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
  if (this->_internal_grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_grin_trait_select_master_neighbor_for_adjacent_list(), target);
  }

  // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
  if (this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PartitionFeature)
  return target;
}

size_t PartitionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PartitionFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grin.MirrorPartitionListFeature mirror_partition_list_feature = 7;
  if (this->_internal_has_mirror_partition_list_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mirror_partition_list_feature_);
  }

  // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
  if (this->_internal_graph_partition_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_graph_partition_strategy());
  }

  // bool grin_trait_natural_id_for_partition = 2;
  if (this->_internal_grin_trait_natural_id_for_partition() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_ref = 3;
  if (this->_internal_grin_enable_vertex_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_ref = 4;
  if (this->_internal_grin_enable_edge_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_master_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // .grin.PropertyDataPartitionStrategy vertex_data = 5;
  if (this->_internal_vertex_data() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vertex_data());
  }

  // .grin.PropertyDataPartitionStrategy edge_data = 6;
  if (this->_internal_edge_data() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_edge_data());
  }

  // bool grin_trait_select_partition_for_vertex_list = 9;
  if (this->_internal_grin_trait_select_partition_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_for_edge_list = 10;
  if (this->_internal_grin_trait_select_master_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_partition_for_edge_list = 11;
  if (this->_internal_grin_trait_select_partition_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
  if (this->_internal_grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
  if (this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionFeature::GetClassData() const { return &_class_data_; }


void PartitionFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionFeature*>(&to_msg);
  auto& from = static_cast<const PartitionFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.PartitionFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mirror_partition_list_feature()) {
    _this->_internal_mutable_mirror_partition_list_feature()->::grin::MirrorPartitionListFeature::MergeFrom(
        from._internal_mirror_partition_list_feature());
  }
  if (from._internal_graph_partition_strategy() != 0) {
    _this->_internal_set_graph_partition_strategy(from._internal_graph_partition_strategy());
  }
  if (from._internal_grin_trait_natural_id_for_partition() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_partition(from._internal_grin_trait_natural_id_for_partition());
  }
  if (from._internal_grin_enable_vertex_ref() != 0) {
    _this->_internal_set_grin_enable_vertex_ref(from._internal_grin_enable_vertex_ref());
  }
  if (from._internal_grin_enable_edge_ref() != 0) {
    _this->_internal_set_grin_enable_edge_ref(from._internal_grin_enable_edge_ref());
  }
  if (from._internal_grin_trait_select_master_for_vertex_list() != 0) {
    _this->_internal_set_grin_trait_select_master_for_vertex_list(from._internal_grin_trait_select_master_for_vertex_list());
  }
  if (from._internal_vertex_data() != 0) {
    _this->_internal_set_vertex_data(from._internal_vertex_data());
  }
  if (from._internal_edge_data() != 0) {
    _this->_internal_set_edge_data(from._internal_edge_data());
  }
  if (from._internal_grin_trait_select_partition_for_vertex_list() != 0) {
    _this->_internal_set_grin_trait_select_partition_for_vertex_list(from._internal_grin_trait_select_partition_for_vertex_list());
  }
  if (from._internal_grin_trait_select_master_for_edge_list() != 0) {
    _this->_internal_set_grin_trait_select_master_for_edge_list(from._internal_grin_trait_select_master_for_edge_list());
  }
  if (from._internal_grin_trait_select_partition_for_edge_list() != 0) {
    _this->_internal_set_grin_trait_select_partition_for_edge_list(from._internal_grin_trait_select_partition_for_edge_list());
  }
  if (from._internal_grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_master_neighbor_for_adjacent_list(from._internal_grin_trait_select_master_neighbor_for_adjacent_list());
  }
  if (from._internal_grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_neighbor_partition_for_adjacent_list(from._internal_grin_trait_select_neighbor_partition_for_adjacent_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionFeature::CopyFrom(const PartitionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PartitionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionFeature::IsInitialized() const {
  return true;
}

void PartitionFeature::InternalSwap(PartitionFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionFeature, _impl_.grin_trait_select_neighbor_partition_for_adjacent_list_)
      + sizeof(PartitionFeature::_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_)
      - PROTOBUF_FIELD_OFFSET(PartitionFeature, _impl_.mirror_partition_list_feature_)>(
          reinterpret_cast<char*>(&_impl_.mirror_partition_list_feature_),
          reinterpret_cast<char*>(&other->_impl_.mirror_partition_list_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class VertexPropertyFeature::_Internal {
 public:
};

VertexPropertyFeature::VertexPropertyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.VertexPropertyFeature)
}
VertexPropertyFeature::VertexPropertyFeature(const VertexPropertyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexPropertyFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_property_){}
    , decltype(_impl_.grin_with_vertex_property_name_){}
    , decltype(_impl_.grin_with_vertex_type_name_){}
    , decltype(_impl_.grin_enable_vertex_property_table_){}
    , decltype(_impl_.grin_enable_vertex_primary_keys_){}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_type_){}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_property_){}
    , decltype(_impl_.grin_assume_by_type_vertex_original_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_with_vertex_property_, &from._impl_.grin_with_vertex_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_assume_by_type_vertex_original_id_) -
    reinterpret_cast<char*>(&_impl_.grin_with_vertex_property_)) + sizeof(_impl_.grin_assume_by_type_vertex_original_id_));
  // @@protoc_insertion_point(copy_constructor:grin.VertexPropertyFeature)
}

inline void VertexPropertyFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_property_){false}
    , decltype(_impl_.grin_with_vertex_property_name_){false}
    , decltype(_impl_.grin_with_vertex_type_name_){false}
    , decltype(_impl_.grin_enable_vertex_property_table_){false}
    , decltype(_impl_.grin_enable_vertex_primary_keys_){false}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_type_){false}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_property_){false}
    , decltype(_impl_.grin_assume_by_type_vertex_original_id_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VertexPropertyFeature::~VertexPropertyFeature() {
  // @@protoc_insertion_point(destructor:grin.VertexPropertyFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexPropertyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VertexPropertyFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexPropertyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.VertexPropertyFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_with_vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_assume_by_type_vertex_original_id_) -
      reinterpret_cast<char*>(&_impl_.grin_with_vertex_property_)) + sizeof(_impl_.grin_assume_by_type_vertex_original_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexPropertyFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_with_vertex_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_with_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_with_vertex_property_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_with_vertex_type_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_vertex_property_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_enable_vertex_property_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_vertex_primary_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grin_enable_vertex_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_vertex_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_trait_natural_id_for_vertex_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_vertex_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.grin_trait_natural_id_for_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_by_type_vertex_original_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.grin_assume_by_type_vertex_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexPropertyFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.VertexPropertyFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_vertex_property = 1;
  if (this->_internal_grin_with_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_vertex_property(), target);
  }

  // bool grin_with_vertex_property_name = 2;
  if (this->_internal_grin_with_vertex_property_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_vertex_property_name(), target);
  }

  // bool grin_with_vertex_type_name = 3;
  if (this->_internal_grin_with_vertex_type_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_with_vertex_type_name(), target);
  }

  // bool grin_enable_vertex_property_table = 4;
  if (this->_internal_grin_enable_vertex_property_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_vertex_property_table(), target);
  }

  // bool grin_enable_vertex_primary_keys = 5;
  if (this->_internal_grin_enable_vertex_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_enable_vertex_primary_keys(), target);
  }

  // bool grin_trait_natural_id_for_vertex_type = 6;
  if (this->_internal_grin_trait_natural_id_for_vertex_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_trait_natural_id_for_vertex_type(), target);
  }

  // bool grin_trait_natural_id_for_vertex_property = 7;
  if (this->_internal_grin_trait_natural_id_for_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_trait_natural_id_for_vertex_property(), target);
  }

  // bool grin_assume_by_type_vertex_original_id = 8;
  if (this->_internal_grin_assume_by_type_vertex_original_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_assume_by_type_vertex_original_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.VertexPropertyFeature)
  return target;
}

size_t VertexPropertyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.VertexPropertyFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_vertex_property = 1;
  if (this->_internal_grin_with_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_property_name = 2;
  if (this->_internal_grin_with_vertex_property_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_type_name = 3;
  if (this->_internal_grin_with_vertex_type_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_property_table = 4;
  if (this->_internal_grin_enable_vertex_property_table() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_primary_keys = 5;
  if (this->_internal_grin_enable_vertex_primary_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_vertex_type = 6;
  if (this->_internal_grin_trait_natural_id_for_vertex_type() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_vertex_property = 7;
  if (this->_internal_grin_trait_natural_id_for_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_by_type_vertex_original_id = 8;
  if (this->_internal_grin_assume_by_type_vertex_original_id() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexPropertyFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexPropertyFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexPropertyFeature::GetClassData() const { return &_class_data_; }


void VertexPropertyFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexPropertyFeature*>(&to_msg);
  auto& from = static_cast<const VertexPropertyFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.VertexPropertyFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_with_vertex_property() != 0) {
    _this->_internal_set_grin_with_vertex_property(from._internal_grin_with_vertex_property());
  }
  if (from._internal_grin_with_vertex_property_name() != 0) {
    _this->_internal_set_grin_with_vertex_property_name(from._internal_grin_with_vertex_property_name());
  }
  if (from._internal_grin_with_vertex_type_name() != 0) {
    _this->_internal_set_grin_with_vertex_type_name(from._internal_grin_with_vertex_type_name());
  }
  if (from._internal_grin_enable_vertex_property_table() != 0) {
    _this->_internal_set_grin_enable_vertex_property_table(from._internal_grin_enable_vertex_property_table());
  }
  if (from._internal_grin_enable_vertex_primary_keys() != 0) {
    _this->_internal_set_grin_enable_vertex_primary_keys(from._internal_grin_enable_vertex_primary_keys());
  }
  if (from._internal_grin_trait_natural_id_for_vertex_type() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_vertex_type(from._internal_grin_trait_natural_id_for_vertex_type());
  }
  if (from._internal_grin_trait_natural_id_for_vertex_property() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_vertex_property(from._internal_grin_trait_natural_id_for_vertex_property());
  }
  if (from._internal_grin_assume_by_type_vertex_original_id() != 0) {
    _this->_internal_set_grin_assume_by_type_vertex_original_id(from._internal_grin_assume_by_type_vertex_original_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexPropertyFeature::CopyFrom(const VertexPropertyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.VertexPropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexPropertyFeature::IsInitialized() const {
  return true;
}

void VertexPropertyFeature::InternalSwap(VertexPropertyFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexPropertyFeature, _impl_.grin_assume_by_type_vertex_original_id_)
      + sizeof(VertexPropertyFeature::_impl_.grin_assume_by_type_vertex_original_id_)
      - PROTOBUF_FIELD_OFFSET(VertexPropertyFeature, _impl_.grin_with_vertex_property_)>(
          reinterpret_cast<char*>(&_impl_.grin_with_vertex_property_),
          reinterpret_cast<char*>(&other->_impl_.grin_with_vertex_property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexPropertyFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// ===================================================================

class EdgePropertyFeature::_Internal {
 public:
};

EdgePropertyFeature::EdgePropertyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.EdgePropertyFeature)
}
EdgePropertyFeature::EdgePropertyFeature(const EdgePropertyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgePropertyFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_edge_property_){}
    , decltype(_impl_.grin_with_edge_property_name_){}
    , decltype(_impl_.grin_with_edge_type_name_){}
    , decltype(_impl_.grin_enable_edge_property_table_){}
    , decltype(_impl_.grin_enable_edge_primary_keys_){}
    , decltype(_impl_.grin_trait_natural_id_for_edge_type_){}
    , decltype(_impl_.grin_trait_natural_id_for_edge_property_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_with_edge_property_, &from._impl_.grin_with_edge_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_natural_id_for_edge_property_) -
    reinterpret_cast<char*>(&_impl_.grin_with_edge_property_)) + sizeof(_impl_.grin_trait_natural_id_for_edge_property_));
  // @@protoc_insertion_point(copy_constructor:grin.EdgePropertyFeature)
}

inline void EdgePropertyFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_edge_property_){false}
    , decltype(_impl_.grin_with_edge_property_name_){false}
    , decltype(_impl_.grin_with_edge_type_name_){false}
    , decltype(_impl_.grin_enable_edge_property_table_){false}
    , decltype(_impl_.grin_enable_edge_primary_keys_){false}
    , decltype(_impl_.grin_trait_natural_id_for_edge_type_){false}
    , decltype(_impl_.grin_trait_natural_id_for_edge_property_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgePropertyFeature::~EdgePropertyFeature() {
  // @@protoc_insertion_point(destructor:grin.EdgePropertyFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgePropertyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgePropertyFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgePropertyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.EdgePropertyFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_with_edge_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_natural_id_for_edge_property_) -
      reinterpret_cast<char*>(&_impl_.grin_with_edge_property_)) + sizeof(_impl_.grin_trait_natural_id_for_edge_property_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgePropertyFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_with_edge_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_with_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_with_edge_property_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_with_edge_type_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_edge_property_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_enable_edge_property_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_edge_primary_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grin_enable_edge_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_edge_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_trait_natural_id_for_edge_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_edge_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.grin_trait_natural_id_for_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgePropertyFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.EdgePropertyFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_edge_property = 1;
  if (this->_internal_grin_with_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_edge_property(), target);
  }

  // bool grin_with_edge_property_name = 2;
  if (this->_internal_grin_with_edge_property_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_edge_property_name(), target);
  }

  // bool grin_with_edge_type_name = 3;
  if (this->_internal_grin_with_edge_type_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_with_edge_type_name(), target);
  }

  // bool grin_enable_edge_property_table = 4;
  if (this->_internal_grin_enable_edge_property_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_edge_property_table(), target);
  }

  // bool grin_enable_edge_primary_keys = 5;
  if (this->_internal_grin_enable_edge_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_enable_edge_primary_keys(), target);
  }

  // bool grin_trait_natural_id_for_edge_type = 6;
  if (this->_internal_grin_trait_natural_id_for_edge_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_trait_natural_id_for_edge_type(), target);
  }

  // bool grin_trait_natural_id_for_edge_property = 7;
  if (this->_internal_grin_trait_natural_id_for_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_trait_natural_id_for_edge_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.EdgePropertyFeature)
  return target;
}

size_t EdgePropertyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.EdgePropertyFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_edge_property = 1;
  if (this->_internal_grin_with_edge_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_property_name = 2;
  if (this->_internal_grin_with_edge_property_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_type_name = 3;
  if (this->_internal_grin_with_edge_type_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_property_table = 4;
  if (this->_internal_grin_enable_edge_property_table() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_primary_keys = 5;
  if (this->_internal_grin_enable_edge_primary_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_edge_type = 6;
  if (this->_internal_grin_trait_natural_id_for_edge_type() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_edge_property = 7;
  if (this->_internal_grin_trait_natural_id_for_edge_property() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgePropertyFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgePropertyFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgePropertyFeature::GetClassData() const { return &_class_data_; }


void EdgePropertyFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgePropertyFeature*>(&to_msg);
  auto& from = static_cast<const EdgePropertyFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.EdgePropertyFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_with_edge_property() != 0) {
    _this->_internal_set_grin_with_edge_property(from._internal_grin_with_edge_property());
  }
  if (from._internal_grin_with_edge_property_name() != 0) {
    _this->_internal_set_grin_with_edge_property_name(from._internal_grin_with_edge_property_name());
  }
  if (from._internal_grin_with_edge_type_name() != 0) {
    _this->_internal_set_grin_with_edge_type_name(from._internal_grin_with_edge_type_name());
  }
  if (from._internal_grin_enable_edge_property_table() != 0) {
    _this->_internal_set_grin_enable_edge_property_table(from._internal_grin_enable_edge_property_table());
  }
  if (from._internal_grin_enable_edge_primary_keys() != 0) {
    _this->_internal_set_grin_enable_edge_primary_keys(from._internal_grin_enable_edge_primary_keys());
  }
  if (from._internal_grin_trait_natural_id_for_edge_type() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_edge_type(from._internal_grin_trait_natural_id_for_edge_type());
  }
  if (from._internal_grin_trait_natural_id_for_edge_property() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_edge_property(from._internal_grin_trait_natural_id_for_edge_property());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgePropertyFeature::CopyFrom(const EdgePropertyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.EdgePropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePropertyFeature::IsInitialized() const {
  return true;
}

void EdgePropertyFeature::InternalSwap(EdgePropertyFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgePropertyFeature, _impl_.grin_trait_natural_id_for_edge_property_)
      + sizeof(EdgePropertyFeature::_impl_.grin_trait_natural_id_for_edge_property_)
      - PROTOBUF_FIELD_OFFSET(EdgePropertyFeature, _impl_.grin_with_edge_property_)>(
          reinterpret_cast<char*>(&_impl_.grin_with_edge_property_),
          reinterpret_cast<char*>(&other->_impl_.grin_with_edge_property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgePropertyFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[4]);
}

// ===================================================================

class PropertyFeature::_Internal {
 public:
  static const ::grin::VertexPropertyFeature& vertex_property_feature(const PropertyFeature* msg);
  static const ::grin::EdgePropertyFeature& edge_property_feature(const PropertyFeature* msg);
};

const ::grin::VertexPropertyFeature&
PropertyFeature::_Internal::vertex_property_feature(const PropertyFeature* msg) {
  return *msg->_impl_.vertex_property_feature_;
}
const ::grin::EdgePropertyFeature&
PropertyFeature::_Internal::edge_property_feature(const PropertyFeature* msg) {
  return *msg->_impl_.edge_property_feature_;
}
PropertyFeature::PropertyFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.PropertyFeature)
}
PropertyFeature::PropertyFeature(const PropertyFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_property_feature_){nullptr}
    , decltype(_impl_.edge_property_feature_){nullptr}
    , decltype(_impl_.vertex_property_){}
    , decltype(_impl_.edge_property_){}
    , decltype(_impl_.grin_enable_row_){}
    , decltype(_impl_.grin_assume_column_store_for_vertex_property_){}
    , decltype(_impl_.grin_assume_column_store_for_edge_property_){}
    , decltype(_impl_.grin_trait_select_type_for_vertex_list_){}
    , decltype(_impl_.grin_trait_select_type_for_edge_list_){}
    , decltype(_impl_.grin_trait_select_neighbor_type_for_adjacent_list_){}
    , decltype(_impl_.grin_trait_select_edge_type_for_adjacent_list_){}
    , decltype(_impl_.grin_trait_specific_vev_relation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vertex_property_feature()) {
    _this->_impl_.vertex_property_feature_ = new ::grin::VertexPropertyFeature(*from._impl_.vertex_property_feature_);
  }
  if (from._internal_has_edge_property_feature()) {
    _this->_impl_.edge_property_feature_ = new ::grin::EdgePropertyFeature(*from._impl_.edge_property_feature_);
  }
  ::memcpy(&_impl_.vertex_property_, &from._impl_.vertex_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_specific_vev_relation_) -
    reinterpret_cast<char*>(&_impl_.vertex_property_)) + sizeof(_impl_.grin_trait_specific_vev_relation_));
  // @@protoc_insertion_point(copy_constructor:grin.PropertyFeature)
}

inline void PropertyFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_property_feature_){nullptr}
    , decltype(_impl_.edge_property_feature_){nullptr}
    , decltype(_impl_.vertex_property_){0}
    , decltype(_impl_.edge_property_){0}
    , decltype(_impl_.grin_enable_row_){false}
    , decltype(_impl_.grin_assume_column_store_for_vertex_property_){false}
    , decltype(_impl_.grin_assume_column_store_for_edge_property_){false}
    , decltype(_impl_.grin_trait_select_type_for_vertex_list_){false}
    , decltype(_impl_.grin_trait_select_type_for_edge_list_){false}
    , decltype(_impl_.grin_trait_select_neighbor_type_for_adjacent_list_){false}
    , decltype(_impl_.grin_trait_select_edge_type_for_adjacent_list_){false}
    , decltype(_impl_.grin_trait_specific_vev_relation_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PropertyFeature::~PropertyFeature() {
  // @@protoc_insertion_point(destructor:grin.PropertyFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vertex_property_feature_;
  if (this != internal_default_instance()) delete _impl_.edge_property_feature_;
}

void PropertyFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PropertyFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vertex_property_feature_ != nullptr) {
    delete _impl_.vertex_property_feature_;
  }
  _impl_.vertex_property_feature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.edge_property_feature_ != nullptr) {
    delete _impl_.edge_property_feature_;
  }
  _impl_.edge_property_feature_ = nullptr;
  ::memset(&_impl_.vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_specific_vev_relation_) -
      reinterpret_cast<char*>(&_impl_.vertex_property_)) + sizeof(_impl_.grin_trait_specific_vev_relation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_enable_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_enable_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.VertexPropertyFeature vertex_property_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertex_property_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.EdgePropertyFeature edge_property_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_property_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy vertex_property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_property(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy edge_property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_property(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_column_store_for_vertex_property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_assume_column_store_for_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_column_store_for_edge_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.grin_assume_column_store_for_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_type_for_vertex_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.grin_trait_select_type_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_type_for_edge_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.grin_trait_select_type_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.grin_trait_select_neighbor_type_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_edge_type_for_adjacent_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.grin_trait_select_edge_type_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_specific_vev_relation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.grin_trait_specific_vev_relation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PropertyFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_enable_row = 1;
  if (this->_internal_grin_enable_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_enable_row(), target);
  }

  // .grin.VertexPropertyFeature vertex_property_feature = 2;
  if (this->_internal_has_vertex_property_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vertex_property_feature(this),
        _Internal::vertex_property_feature(this).GetCachedSize(), target, stream);
  }

  // .grin.EdgePropertyFeature edge_property_feature = 3;
  if (this->_internal_has_edge_property_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::edge_property_feature(this),
        _Internal::edge_property_feature(this).GetCachedSize(), target, stream);
  }

  // .grin.PropertyDataPartitionStrategy vertex_property = 4;
  if (this->_internal_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vertex_property(), target);
  }

  // .grin.PropertyDataPartitionStrategy edge_property = 5;
  if (this->_internal_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_edge_property(), target);
  }

  // bool grin_assume_column_store_for_vertex_property = 6;
  if (this->_internal_grin_assume_column_store_for_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_assume_column_store_for_vertex_property(), target);
  }

  // bool grin_assume_column_store_for_edge_property = 7;
  if (this->_internal_grin_assume_column_store_for_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_assume_column_store_for_edge_property(), target);
  }

  // bool grin_trait_select_type_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_type_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_trait_select_type_for_vertex_list(), target);
  }

  // bool grin_trait_select_type_for_edge_list = 9;
  if (this->_internal_grin_trait_select_type_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_grin_trait_select_type_for_edge_list(), target);
  }

  // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
  if (this->_internal_grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_grin_trait_select_neighbor_type_for_adjacent_list(), target);
  }

  // bool grin_trait_select_edge_type_for_adjacent_list = 11;
  if (this->_internal_grin_trait_select_edge_type_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_grin_trait_select_edge_type_for_adjacent_list(), target);
  }

  // bool grin_trait_specific_vev_relation = 12;
  if (this->_internal_grin_trait_specific_vev_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_grin_trait_specific_vev_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PropertyFeature)
  return target;
}

size_t PropertyFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PropertyFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grin.VertexPropertyFeature vertex_property_feature = 2;
  if (this->_internal_has_vertex_property_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vertex_property_feature_);
  }

  // .grin.EdgePropertyFeature edge_property_feature = 3;
  if (this->_internal_has_edge_property_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edge_property_feature_);
  }

  // .grin.PropertyDataPartitionStrategy vertex_property = 4;
  if (this->_internal_vertex_property() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vertex_property());
  }

  // .grin.PropertyDataPartitionStrategy edge_property = 5;
  if (this->_internal_edge_property() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_edge_property());
  }

  // bool grin_enable_row = 1;
  if (this->_internal_grin_enable_row() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_column_store_for_vertex_property = 6;
  if (this->_internal_grin_assume_column_store_for_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_column_store_for_edge_property = 7;
  if (this->_internal_grin_assume_column_store_for_edge_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_type_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_type_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_type_for_edge_list = 9;
  if (this->_internal_grin_trait_select_type_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
  if (this->_internal_grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_edge_type_for_adjacent_list = 11;
  if (this->_internal_grin_trait_select_edge_type_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_specific_vev_relation = 12;
  if (this->_internal_grin_trait_specific_vev_relation() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyFeature::GetClassData() const { return &_class_data_; }


void PropertyFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyFeature*>(&to_msg);
  auto& from = static_cast<const PropertyFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.PropertyFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vertex_property_feature()) {
    _this->_internal_mutable_vertex_property_feature()->::grin::VertexPropertyFeature::MergeFrom(
        from._internal_vertex_property_feature());
  }
  if (from._internal_has_edge_property_feature()) {
    _this->_internal_mutable_edge_property_feature()->::grin::EdgePropertyFeature::MergeFrom(
        from._internal_edge_property_feature());
  }
  if (from._internal_vertex_property() != 0) {
    _this->_internal_set_vertex_property(from._internal_vertex_property());
  }
  if (from._internal_edge_property() != 0) {
    _this->_internal_set_edge_property(from._internal_edge_property());
  }
  if (from._internal_grin_enable_row() != 0) {
    _this->_internal_set_grin_enable_row(from._internal_grin_enable_row());
  }
  if (from._internal_grin_assume_column_store_for_vertex_property() != 0) {
    _this->_internal_set_grin_assume_column_store_for_vertex_property(from._internal_grin_assume_column_store_for_vertex_property());
  }
  if (from._internal_grin_assume_column_store_for_edge_property() != 0) {
    _this->_internal_set_grin_assume_column_store_for_edge_property(from._internal_grin_assume_column_store_for_edge_property());
  }
  if (from._internal_grin_trait_select_type_for_vertex_list() != 0) {
    _this->_internal_set_grin_trait_select_type_for_vertex_list(from._internal_grin_trait_select_type_for_vertex_list());
  }
  if (from._internal_grin_trait_select_type_for_edge_list() != 0) {
    _this->_internal_set_grin_trait_select_type_for_edge_list(from._internal_grin_trait_select_type_for_edge_list());
  }
  if (from._internal_grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_neighbor_type_for_adjacent_list(from._internal_grin_trait_select_neighbor_type_for_adjacent_list());
  }
  if (from._internal_grin_trait_select_edge_type_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_edge_type_for_adjacent_list(from._internal_grin_trait_select_edge_type_for_adjacent_list());
  }
  if (from._internal_grin_trait_specific_vev_relation() != 0) {
    _this->_internal_set_grin_trait_specific_vev_relation(from._internal_grin_trait_specific_vev_relation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyFeature::CopyFrom(const PropertyFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PropertyFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFeature::IsInitialized() const {
  return true;
}

void PropertyFeature::InternalSwap(PropertyFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyFeature, _impl_.grin_trait_specific_vev_relation_)
      + sizeof(PropertyFeature::_impl_.grin_trait_specific_vev_relation_)
      - PROTOBUF_FIELD_OFFSET(PropertyFeature, _impl_.vertex_property_feature_)>(
          reinterpret_cast<char*>(&_impl_.vertex_property_feature_),
          reinterpret_cast<char*>(&other->_impl_.vertex_property_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[5]);
}

// ===================================================================

class IndexFeature::_Internal {
 public:
};

IndexFeature::IndexFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.IndexFeature)
}
IndexFeature::IndexFeature(const IndexFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_label_){}
    , decltype(_impl_.grin_with_edge_label_){}
    , decltype(_impl_.grin_assume_all_vertex_list_sorted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_with_vertex_label_, &from._impl_.grin_with_vertex_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_assume_all_vertex_list_sorted_) -
    reinterpret_cast<char*>(&_impl_.grin_with_vertex_label_)) + sizeof(_impl_.grin_assume_all_vertex_list_sorted_));
  // @@protoc_insertion_point(copy_constructor:grin.IndexFeature)
}

inline void IndexFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_label_){false}
    , decltype(_impl_.grin_with_edge_label_){false}
    , decltype(_impl_.grin_assume_all_vertex_list_sorted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexFeature::~IndexFeature() {
  // @@protoc_insertion_point(destructor:grin.IndexFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.IndexFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_with_vertex_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_assume_all_vertex_list_sorted_) -
      reinterpret_cast<char*>(&_impl_.grin_with_vertex_label_)) + sizeof(_impl_.grin_assume_all_vertex_list_sorted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_with_vertex_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_with_vertex_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_with_edge_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_all_vertex_list_sorted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_assume_all_vertex_list_sorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.IndexFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_vertex_label = 1;
  if (this->_internal_grin_with_vertex_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_vertex_label(), target);
  }

  // bool grin_with_edge_label = 2;
  if (this->_internal_grin_with_edge_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_edge_label(), target);
  }

  // bool grin_assume_all_vertex_list_sorted = 3;
  if (this->_internal_grin_assume_all_vertex_list_sorted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_assume_all_vertex_list_sorted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.IndexFeature)
  return target;
}

size_t IndexFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.IndexFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_vertex_label = 1;
  if (this->_internal_grin_with_vertex_label() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_label = 2;
  if (this->_internal_grin_with_edge_label() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_all_vertex_list_sorted = 3;
  if (this->_internal_grin_assume_all_vertex_list_sorted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexFeature::GetClassData() const { return &_class_data_; }


void IndexFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexFeature*>(&to_msg);
  auto& from = static_cast<const IndexFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.IndexFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_with_vertex_label() != 0) {
    _this->_internal_set_grin_with_vertex_label(from._internal_grin_with_vertex_label());
  }
  if (from._internal_grin_with_edge_label() != 0) {
    _this->_internal_set_grin_with_edge_label(from._internal_grin_with_edge_label());
  }
  if (from._internal_grin_assume_all_vertex_list_sorted() != 0) {
    _this->_internal_set_grin_assume_all_vertex_list_sorted(from._internal_grin_assume_all_vertex_list_sorted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexFeature::CopyFrom(const IndexFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.IndexFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexFeature::IsInitialized() const {
  return true;
}

void IndexFeature::InternalSwap(IndexFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexFeature, _impl_.grin_assume_all_vertex_list_sorted_)
      + sizeof(IndexFeature::_impl_.grin_assume_all_vertex_list_sorted_)
      - PROTOBUF_FIELD_OFFSET(IndexFeature, _impl_.grin_with_vertex_label_)>(
          reinterpret_cast<char*>(&_impl_.grin_with_vertex_label_),
          reinterpret_cast<char*>(&other->_impl_.grin_with_vertex_label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[6]);
}

// ===================================================================

class PredicateFeature::_Internal {
 public:
};

PredicateFeature::PredicateFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:grin.PredicateFeature)
}
PredicateFeature::PredicateFeature(const PredicateFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PredicateFeature* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grin.PredicateFeature)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredicateFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredicateFeature::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PredicateFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[7]);
}

// ===================================================================

class StorageFeature::_Internal {
 public:
  static const ::grin::TopologyFeature& topology_feature(const StorageFeature* msg);
  static const ::grin::PartitionFeature& partition_feature(const StorageFeature* msg);
  static const ::grin::PropertyFeature& property_feature(const StorageFeature* msg);
  static const ::grin::IndexFeature& index_feature(const StorageFeature* msg);
  static const ::grin::PredicateFeature& predicate_feature(const StorageFeature* msg);
};

const ::grin::TopologyFeature&
StorageFeature::_Internal::topology_feature(const StorageFeature* msg) {
  return *msg->_impl_.specific_feature_.topology_feature_;
}
const ::grin::PartitionFeature&
StorageFeature::_Internal::partition_feature(const StorageFeature* msg) {
  return *msg->_impl_.specific_feature_.partition_feature_;
}
const ::grin::PropertyFeature&
StorageFeature::_Internal::property_feature(const StorageFeature* msg) {
  return *msg->_impl_.specific_feature_.property_feature_;
}
const ::grin::IndexFeature&
StorageFeature::_Internal::index_feature(const StorageFeature* msg) {
  return *msg->_impl_.specific_feature_.index_feature_;
}
const ::grin::PredicateFeature&
StorageFeature::_Internal::predicate_feature(const StorageFeature* msg) {
  return *msg->_impl_.specific_feature_.predicate_feature_;
}
void StorageFeature::set_allocated_topology_feature(::grin::TopologyFeature* topology_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_feature();
  if (topology_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topology_feature);
    if (message_arena != submessage_arena) {
      topology_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topology_feature, submessage_arena);
    }
    set_has_topology_feature();
    _impl_.specific_feature_.topology_feature_ = topology_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.topology_feature)
}
void StorageFeature::set_allocated_partition_feature(::grin::PartitionFeature* partition_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_feature();
  if (partition_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partition_feature);
    if (message_arena != submessage_arena) {
      partition_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition_feature, submessage_arena);
    }
    set_has_partition_feature();
    _impl_.specific_feature_.partition_feature_ = partition_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.partition_feature)
}
void StorageFeature::set_allocated_property_feature(::grin::PropertyFeature* property_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_feature();
  if (property_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(property_feature);
    if (message_arena != submessage_arena) {
      property_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_feature, submessage_arena);
    }
    set_has_property_feature();
    _impl_.specific_feature_.property_feature_ = property_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.property_feature)
}
void StorageFeature::set_allocated_index_feature(::grin::IndexFeature* index_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_feature();
  if (index_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index_feature);
    if (message_arena != submessage_arena) {
      index_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_feature, submessage_arena);
    }
    set_has_index_feature();
    _impl_.specific_feature_.index_feature_ = index_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.index_feature)
}
void StorageFeature::set_allocated_predicate_feature(::grin::PredicateFeature* predicate_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_feature();
  if (predicate_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(predicate_feature);
    if (message_arena != submessage_arena) {
      predicate_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate_feature, submessage_arena);
    }
    set_has_predicate_feature();
    _impl_.specific_feature_.predicate_feature_ = predicate_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageFeature.predicate_feature)
}
StorageFeature::StorageFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.StorageFeature)
}
StorageFeature::StorageFeature(const StorageFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StorageFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.specific_feature_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_specific_feature();
  switch (from.specific_feature_case()) {
    case kTopologyFeature: {
      _this->_internal_mutable_topology_feature()->::grin::TopologyFeature::MergeFrom(
          from._internal_topology_feature());
      break;
    }
    case kPartitionFeature: {
      _this->_internal_mutable_partition_feature()->::grin::PartitionFeature::MergeFrom(
          from._internal_partition_feature());
      break;
    }
    case kPropertyFeature: {
      _this->_internal_mutable_property_feature()->::grin::PropertyFeature::MergeFrom(
          from._internal_property_feature());
      break;
    }
    case kIndexFeature: {
      _this->_internal_mutable_index_feature()->::grin::IndexFeature::MergeFrom(
          from._internal_index_feature());
      break;
    }
    case kPredicateFeature: {
      _this->_internal_mutable_predicate_feature()->::grin::PredicateFeature::MergeFrom(
          from._internal_predicate_feature());
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grin.StorageFeature)
}

inline void StorageFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.specific_feature_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_specific_feature();
}

StorageFeature::~StorageFeature() {
  // @@protoc_insertion_point(destructor:grin.StorageFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_specific_feature()) {
    clear_specific_feature();
  }
}

void StorageFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StorageFeature::clear_specific_feature() {
// @@protoc_insertion_point(one_of_clear_start:grin.StorageFeature)
  switch (specific_feature_case()) {
    case kTopologyFeature: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_feature_.topology_feature_;
      }
      break;
    }
    case kPartitionFeature: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_feature_.partition_feature_;
      }
      break;
    }
    case kPropertyFeature: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_feature_.property_feature_;
      }
      break;
    }
    case kIndexFeature: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_feature_.index_feature_;
      }
      break;
    }
    case kPredicateFeature: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_feature_.predicate_feature_;
      }
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SPECIFIC_FEATURE_NOT_SET;
}


void StorageFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.StorageFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specific_feature();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grin.TopologyFeature topology_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topology_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PartitionFeature partition_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyFeature property_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.IndexFeature index_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PredicateFeature predicate_feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.StorageFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grin.TopologyFeature topology_feature = 1;
  if (_internal_has_topology_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topology_feature(this),
        _Internal::topology_feature(this).GetCachedSize(), target, stream);
  }

  // .grin.PartitionFeature partition_feature = 2;
  if (_internal_has_partition_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::partition_feature(this),
        _Internal::partition_feature(this).GetCachedSize(), target, stream);
  }

  // .grin.PropertyFeature property_feature = 3;
  if (_internal_has_property_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::property_feature(this),
        _Internal::property_feature(this).GetCachedSize(), target, stream);
  }

  // .grin.IndexFeature index_feature = 4;
  if (_internal_has_index_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::index_feature(this),
        _Internal::index_feature(this).GetCachedSize(), target, stream);
  }

  // .grin.PredicateFeature predicate_feature = 5;
  if (_internal_has_predicate_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::predicate_feature(this),
        _Internal::predicate_feature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.StorageFeature)
  return target;
}

size_t StorageFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.StorageFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (specific_feature_case()) {
    // .grin.TopologyFeature topology_feature = 1;
    case kTopologyFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_feature_.topology_feature_);
      break;
    }
    // .grin.PartitionFeature partition_feature = 2;
    case kPartitionFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_feature_.partition_feature_);
      break;
    }
    // .grin.PropertyFeature property_feature = 3;
    case kPropertyFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_feature_.property_feature_);
      break;
    }
    // .grin.IndexFeature index_feature = 4;
    case kIndexFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_feature_.index_feature_);
      break;
    }
    // .grin.PredicateFeature predicate_feature = 5;
    case kPredicateFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_feature_.predicate_feature_);
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StorageFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageFeature::GetClassData() const { return &_class_data_; }


void StorageFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StorageFeature*>(&to_msg);
  auto& from = static_cast<const StorageFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.StorageFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specific_feature_case()) {
    case kTopologyFeature: {
      _this->_internal_mutable_topology_feature()->::grin::TopologyFeature::MergeFrom(
          from._internal_topology_feature());
      break;
    }
    case kPartitionFeature: {
      _this->_internal_mutable_partition_feature()->::grin::PartitionFeature::MergeFrom(
          from._internal_partition_feature());
      break;
    }
    case kPropertyFeature: {
      _this->_internal_mutable_property_feature()->::grin::PropertyFeature::MergeFrom(
          from._internal_property_feature());
      break;
    }
    case kIndexFeature: {
      _this->_internal_mutable_index_feature()->::grin::IndexFeature::MergeFrom(
          from._internal_index_feature());
      break;
    }
    case kPredicateFeature: {
      _this->_internal_mutable_predicate_feature()->::grin::PredicateFeature::MergeFrom(
          from._internal_predicate_feature());
      break;
    }
    case SPECIFIC_FEATURE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageFeature::CopyFrom(const StorageFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.StorageFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageFeature::IsInitialized() const {
  return true;
}

void StorageFeature::InternalSwap(StorageFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.specific_feature_, other->_impl_.specific_feature_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[8]);
}

// ===================================================================

class Statistics::_Internal {
 public:
};

Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Statistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_count_){}
    , decltype(_impl_.edge_count_){}
    , decltype(_impl_.partition_count_){}
    , decltype(_impl_.vertex_type_count_){}
    , decltype(_impl_.edge_type_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vertex_count_, &from._impl_.vertex_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.edge_type_count_) -
    reinterpret_cast<char*>(&_impl_.vertex_count_)) + sizeof(_impl_.edge_type_count_));
  // @@protoc_insertion_point(copy_constructor:grin.Statistics)
}

inline void Statistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_count_){0}
    , decltype(_impl_.edge_count_){0}
    , decltype(_impl_.partition_count_){0}
    , decltype(_impl_.vertex_type_count_){0}
    , decltype(_impl_.edge_type_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:grin.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.Statistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vertex_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.edge_type_count_) -
      reinterpret_cast<char*>(&_impl_.vertex_count_)) + sizeof(_impl_.edge_type_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edge_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 partition_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vertex_type_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vertex_type_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edge_type_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.edge_type_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Statistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.Statistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_count(), target);
  }

  // int32 edge_count = 2;
  if (this->_internal_edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_edge_count(), target);
  }

  // int32 partition_count = 3;
  if (this->_internal_partition_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_count(), target);
  }

  // int32 vertex_type_count = 4;
  if (this->_internal_vertex_type_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_vertex_type_count(), target);
  }

  // int32 edge_type_count = 5;
  if (this->_internal_edge_type_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_edge_type_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.Statistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_count());
  }

  // int32 edge_count = 2;
  if (this->_internal_edge_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edge_count());
  }

  // int32 partition_count = 3;
  if (this->_internal_partition_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_count());
  }

  // int32 vertex_type_count = 4;
  if (this->_internal_vertex_type_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_type_count());
  }

  // int32 edge_type_count = 5;
  if (this->_internal_edge_type_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edge_type_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistics::GetClassData() const { return &_class_data_; }


void Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Statistics*>(&to_msg);
  auto& from = static_cast<const Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.Statistics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vertex_count() != 0) {
    _this->_internal_set_vertex_count(from._internal_vertex_count());
  }
  if (from._internal_edge_count() != 0) {
    _this->_internal_set_edge_count(from._internal_edge_count());
  }
  if (from._internal_partition_count() != 0) {
    _this->_internal_set_partition_count(from._internal_partition_count());
  }
  if (from._internal_vertex_type_count() != 0) {
    _this->_internal_set_vertex_type_count(from._internal_vertex_type_count());
  }
  if (from._internal_edge_type_count() != 0) {
    _this->_internal_set_edge_type_count(from._internal_edge_type_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistics, _impl_.edge_type_count_)
      + sizeof(Statistics::_impl_.edge_type_count_)
      - PROTOBUF_FIELD_OFFSET(Statistics, _impl_.vertex_count_)>(
          reinterpret_cast<char*>(&_impl_.vertex_count_),
          reinterpret_cast<char*>(&other->_impl_.vertex_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[9]);
}

// ===================================================================

class Graph::_Internal {
 public:
  static const ::grin::Statistics& statistics(const Graph* msg);
};

const ::grin::Statistics&
Graph::_Internal::statistics(const Graph* msg) {
  return *msg->_impl_.statistics_;
}
Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Graph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.grin_version_){}
    , decltype(_impl_.statistics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.grin_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grin_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_grin_version().empty()) {
    _this->_impl_.grin_version_.Set(from._internal_grin_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_statistics()) {
    _this->_impl_.statistics_ = new ::grin::Statistics(*from._impl_.statistics_);
  }
  // @@protoc_insertion_point(copy_constructor:grin.Graph)
}

inline void Graph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.grin_version_){}
    , decltype(_impl_.statistics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grin_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grin_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:grin.Graph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedPtrField();
  _impl_.uri_.Destroy();
  _impl_.grin_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.statistics_;
}

void Graph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.Graph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  _impl_.uri_.ClearToEmpty();
  _impl_.grin_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.statistics_ != nullptr) {
    delete _impl_.statistics_;
  }
  _impl_.statistics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grin.Graph.uri"));
        } else
          goto handle_unusual;
        continue;
      // string grin_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_grin_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grin.Graph.grin_version"));
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.StorageFeature features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .grin.Statistics statistics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.Graph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grin.Graph.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string grin_version = 2;
  if (!this->_internal_grin_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_grin_version().data(), static_cast<int>(this->_internal_grin_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grin.Graph.grin_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_grin_version(), target);
  }

  // repeated .grin.StorageFeature features = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .grin.Statistics statistics = 4;
  if (this->_internal_has_statistics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::statistics(this),
        _Internal::statistics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.Graph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grin.StorageFeature features = 3;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->_impl_.features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string grin_version = 2;
  if (!this->_internal_grin_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_grin_version());
  }

  // .grin.Statistics statistics = 4;
  if (this->_internal_has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statistics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Graph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph::GetClassData() const { return &_class_data_; }


void Graph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Graph*>(&to_msg);
  auto& from = static_cast<const Graph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.Graph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_grin_version().empty()) {
    _this->_internal_set_grin_version(from._internal_grin_version());
  }
  if (from._internal_has_statistics()) {
    _this->_internal_mutable_statistics()->::grin::Statistics::MergeFrom(
        from._internal_statistics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.grin_version_, lhs_arena,
      &other->_impl_.grin_version_, rhs_arena
  );
  swap(_impl_.statistics_, other->_impl_.statistics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grin::TopologyFeature*
Arena::CreateMaybeMessage< ::grin::TopologyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::TopologyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::MirrorPartitionListFeature*
Arena::CreateMaybeMessage< ::grin::MirrorPartitionListFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::MirrorPartitionListFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PartitionFeature*
Arena::CreateMaybeMessage< ::grin::PartitionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PartitionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::VertexPropertyFeature*
Arena::CreateMaybeMessage< ::grin::VertexPropertyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::VertexPropertyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::EdgePropertyFeature*
Arena::CreateMaybeMessage< ::grin::EdgePropertyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::EdgePropertyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PropertyFeature*
Arena::CreateMaybeMessage< ::grin::PropertyFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PropertyFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::IndexFeature*
Arena::CreateMaybeMessage< ::grin::IndexFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::IndexFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PredicateFeature*
Arena::CreateMaybeMessage< ::grin::PredicateFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PredicateFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::StorageFeature*
Arena::CreateMaybeMessage< ::grin::StorageFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::StorageFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::Statistics*
Arena::CreateMaybeMessage< ::grin::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::Graph*
Arena::CreateMaybeMessage< ::grin::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::Graph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
